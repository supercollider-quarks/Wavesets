TITLE:: Wavesets
summary:: analyse soundfiles into short fragments for granular synthesis
categories:: GranularSynthesis
related:: Classes/Buffer, Classes/Event

DESCRIPTION::
Wavesets analyses soundfiles into short fragments called wavesets, and contains these waveset data and their info. It can support a variety of waveset based synthesis instruments.

By Trevor Wishart's definition, a waveset is a segment of an audio signal between
one non-positive to positive zero crossing and the next. [ see T. Wishart (1994): Audible Design. ] Note that this definition only applies to mono signals.

In extension of that concept, the Wavesets class provides fractional zero crossings, amplitude analyses, and other statistical data.

See also the end of Chapter 16, Microsound, in the SuperCollider Book at MIT Press for detailed examples - code available here: 

link::http://supercolliderbook.net/::

code::
	// first code example: 

Server.default = s = Server.internal; s.boot;
		
		// make a wavesets from a soundfile
w = Wavesets.from(String.scDir +/+ "sounds/a11wlk01.wav");	
w.dump;		// contains mainly analysis data 
				
w.plot(200, 1);	// plot a single waveset
w.signal.copyRange(w.xings[600], w.xings[601]).plot;

w.plot(600, 1);	// a single
w.plot(600, 5);	// a group of five contiguous wavesets
w.buffer;
w.buffer.play;
	
Wavesets.prepareSynthDefs;
	// startWs
w.eventFor(startWs: 600, length: 5, repeats: 2).postln.play;
w.eventFor(startWs: 600, length: 2, playRate: 1, repeats: 5).postln.play;
w.eventFor(startWs: 600, length: 2, playRate: 0.5, repeats: 5).postln.play;
w.eventFor(700, 20, 5, 1).play;
		
(
fork { 
	666.do { |i| 
		var ev = w.eventFor(i * 5, 2, 5, exprand(0.5, 1.0)); 
		ev.put(\pan, 1.0.rand2).play;
		ev.sustain.wait;
	}
};
)
::

CLASSMETHODS::

private:: initClass

METHOD:: prepareSynthDefs
prepare some basic synthdefs that can be used for Wavesets synthesis (when using the eventFor method).

METHOD:: all
global dict for all instances of Wavesets

METHOD:: at
access instances in Wavesets.all by name (key).
ARGUMENT:: key
a symbol.

METHOD:: clear
clear all existing wavesets from the Wavesets.all.

METHOD:: from 
make a Wavesets from a emphasis::MONO:: soundfile at path.
ARGUMENT:: path
the path to the soundfile.

ARGUMENT:: name
the name by which to store the Wavesets instance.

ARGUMENT:: toBuffer
flag whether to make a buffer that that soundfile. default = true.

ARGUMENT:: server
the server on which to load the soundfile. default = s.

METHOD:: new
make a new Wavesets instance. *from is much more common.

METHOD:: minLength
The minimum number of sample points a single Waveset can have. This is used to avoid lots of extremely short samples in noisy samples. Logical minimum is 2, default is 10.

METHOD:: defaultInst
get and set the name of the default synthdef to use in Wavesets event-related methods.


INSTANCEMETHODS::

subSection:: Instance variables

method:: signal
the audio signal that was analysed. 

method:: name 
the wavesets name in the global dictionary

method:: buffer
a buffer on the server that was created from the same soundfile

method:: numFrames 
the number of frames of the soundfile, the buffer and the Wavesets

method:: sampleRate
the sample rate of the signal/buffer. default is s.sampleRate

strong:: These variables are analysis result lists:
method:: xings	
all integer indices of the zero crossings found
method:: numXings
total number of zero crossings found
method:: lengths
lengths of all wavesets
method:: amps
peak amplitude of every waveset
method:: maxima	
indices of positive maximum value in every waveset
method:: minima	
indices of negative minimum value in every waveset

method:: fracXings	
the calculated fractional zerocrossing points. This allows for more precise pitch information and waveset transitions, resulting in smoother sound.
method:: fracLengths
fractional lengths - in effect, this is 1/wavesetFreq.

strong:: These are overall statistics of the entire Wavesets:
method:: minSet
shorted waveset
method:: maxSet
longest waveset
method:: avgLength
average length of all wavesets
method:: sqrAvgLength
weighted average length - so bigger wavesets have a larger impact
method:: minAmp	
softest waveset amplitude
method:: maxAmp	
loudest waveset amplitude
method:: avgAmp
average amplitude of the entire waveset
method:: sqrAvgAmp
weighted average of (squared) amplitude of the entire waveset

strong:: Instance methods

METHOD:: eventFor
generate an event for a given combination of start waveset index, number of wavesets, repeats, playback rate, and use of fractional crossings.

ARGUMENT:: startWs, numWs, repeats, playRate, useFrac

METHOD:: minima

METHOD:: frameFor

METHOD:: analyse
analyse the entire soundfile, then do finishFunc

METHOD:: analyseFromTo
analyse the soundfile from given startFrame to endFrame

METHOD:: calcAverages
analysis to do after loading.

METHOD:: toBuffer
create a buffer for the Waevesets on the server given.

METHOD:: plot
plot a section of <length> Wavesets from <startWs>

EXAMPLES::

code::
The simplest usage is to ask the waveset to prepare an event for you.

		w = Wavesets.from("sounds/a11wlk01.wav");	

	(
		fork { 
			666.do { |i| 
				var ev = w.eventFor((i * 5).postln, 2, 5, exprand(0.5, 1.0)); 
				ev.put(\pan, 1.0.rand2).play;
				ev.sustain.wait;
			}
		};		
	)




	// play a single waveset or waveset group by hand
(
{ 	var startFr, endFr, dur; 
	startFr = w.xings[800]; 
	endFr = w.xings[820];
	
	dur = endFr - startFr / w.buffer.sampleRate;
	dur.postln;
	BufRd.ar(1, w.buffer, Line.ar(startFr, endFr, dur, doneAction: 2)) 
}.play;
)

	loop buffer segments with a Phasor:
(
x = { arg start = 0, end = 128, playRate = 1; 
	BufRd.ar(1, w.buffer, 
		Phasor.ar(0, playRate * BufRateScale.kr(w.buffer), start, end)
	)
}.scope(zoom: 8);
)

x.set(\start, 0, \end, 1024);	// just some random length, may buzz
x.set(\start, w.xings.at(100), \end, w.xings.at(101));
x.set(\start, w.xings.at(101), \end, w.xings.at(102));
x.set(\start, w.xings.at(100), \end, w.xings.at(200));
x.set(\start, w.xings.at(780), \end, w.xings.at(800));
x.set(\playRate, 0.25);
x.set(\playRate, 1);

x.release;

::

Doing Some Task (optional)
		
Examples

code::
To play a waveset (or group) for a precise number of repetitions, 
one can use a SynthDef with a hard cutoff envelope, as below.
Note that adding an offset outside the phasor works better; 
Phasor.ar(0, playRate, start, end) is sometimes off by a few samples.
This is likely a 32bit float precision problem.

(	// the simplest synthdef as implented in *prepareSynthDefs: 
SynthDef(\wvst0, { arg out = 0, buf = 0, start = 0, length = 441, playRate = 1, sustain = 1, amp=0.2, pan; 
	var phasor = Phasor.ar(0, BufRateScale.ir(buf) * playRate, 0, length) + start;
	var env = EnvGen.ar(Env([amp, amp, 0], [sustain, 0]), doneAction: 2);
	var snd = BufRd.ar(1, buf, phasor) * env;
	
	OffsetOut.ar(out, Pan2.ar(snd, pan));
}, \ir.dup(8)).memStore;
)

Synth("wvst0", [\bufnum, b, \start, 0, \length, 5000, \sustain, 0.1]);

	// do the math by hand to understand it:
(
var startWs = 100, length = 6, rep = 10, playRate = 0.5;
var startframe, endframe, sustain;

startframe = w.xings[startWs];
endframe = w.xings[startWs + length];
sustain = (endframe - startframe) * rep / playRate / w.sampleRate; 

Synth("wvst0", [
	\bufnum, w.buffer, 
	\start, startframe, 
	\length, endframe - startframe, 
	\playRate, playRate,
	\sustain, sustain, 
	\amp, 1
]);
)
	// the same done with eventFor:
w.eventFor(100, 6, repeats: 10, playRate: 0.5).put(\amp, 1).play;

(
Task({ 
	300.do({ arg i; 
		var ev = w.eventFor(100 + i, 2, 10, 1);
				
		ev.putPairs([\pan, [-1, 1].choose, \amp, 0.5]);
		ev.play;
		(ev.sustain).wait; 
	});
}).play;
)

x = a11wlk01-44_1.aiff; 

		// compare fractional and integer xings:
		// especially for high frequency signals, 
		// fractional does slightly cleaner looping and finer pitch gradations.
		// - better test below with ordering wavesets by length -
(
Task({ 
	[true, false].do { |usefrac| 
		(1250..1500).do { arg i; 
			var ev = w.eventFor(i, 1, 100, 1, useFrac: usefrac);
					
			ev.putPairs([/*\pan, 0 [-1, 1].choose,*/ \amp, 0.5]);
			ev.play;
			(ev.sustain).wait; 
		};
		1.wait;
	};
}).play;
)

		// some variants waveset timestretch
(
Task({ 
		// segments of 10 wavesets, step by 1 => 10x longer
	(300, 301 .. 900).do { arg start; 
		var ev = w.eventFor(start, numWs: 10, repeats: 1);
				
		ev.putPairs([\amp, 0.5]);
		ev.play;
		(ev.sustain).wait; 
	};
	1.wait; 

		// 1 waveset at a time, loop 10 times - much more 'pitch beads'-like
	(300, 301 .. 900).do { arg start; 
		var ev = w.eventFor(start, numWs: 1, repeats: 10);
				
		ev.putPairs([\amp, 0.5]);
		ev.play;
		(ev.sustain).wait; 
	};
	
}).play;
)



	// play them sorted by (integer) waveset length: 
w.lengths.plot;	// lengths are very irregular
o = w.lengths.order;

(
Task {
	var start, end, startFr, endFr, dur, repeats;
	var order = w.lengths.order;
	    
	[false, true].do { |useFrac| 
		if (useFrac) { 
			"fractional crossings - better pitch resolution." 
		} {
			"integer crossings - pitches quantized to integer sample lengths."
		}.postln;
		
		order.do { arg start; 
			var ev = w.eventFor(start, numWs: 1, repeats: 5);
			ev.putPairs([\amp, 0.5]);
			ev.play;
			(ev.sustain).wait;
		};
		0.5.wait;
	};
}.play;
)
::